"use strict";(()=>{var e={};e.id=822,e.ids=[822],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2048:e=>{e.exports=require("fs")},5315:e=>{e.exports=require("path")},8245:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>T,patchFetch:()=>l,requestAsyncStorage:()=>g,routeModule:()=>c,serverHooks:()=>E,staticGenerationAsyncStorage:()=>v});var a={};t.r(a),t.d(a,{GET:()=>p,dynamic:()=>u});var i=t(9303),n=t(8716),s=t(670),o=t(7070),d=t(3720);let u="force-dynamic";async function p(e){try{let{searchParams:r}=e.nextUrl,t=r.get("serviceProviderId");if(!t)return o.NextResponse.json({error:"Service provider ID is required"},{status:400});let a=await (0,d.kL)(t);return o.NextResponse.json(a)}catch(e){return console.error("Error fetching average rating:",e),o.NextResponse.json({error:"Internal server error"},{status:500})}}let c=new i.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/ratings/average/route",pathname:"/api/ratings/average",filename:"route",bundlePath:"app/api/ratings/average/route"},resolvedPagePath:"/Users/jonathanpolikowski/custom-ratings/app/api/ratings/average/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:g,staticGenerationAsyncStorage:v,serverHooks:E}=c,T="/api/ratings/average/route";function l(){return(0,s.patchFetch)({serverHooks:E,staticGenerationAsyncStorage:v})}},3720:(e,r,t)=>{t.d(r,{jI:()=>d,kL:()=>u});let a=require("sqlite3");var i=t.n(a),n=t(6360);let s=null;async function o(){return s||(s=await (0,n.bA)({filename:"./ratings.db",driver:i().Database}),await s.exec(`
      CREATE TABLE IF NOT EXISTS ratings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        service_provider_id TEXT NOT NULL,
        rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        ip_address TEXT,
        user_agent TEXT
      );

      CREATE INDEX IF NOT EXISTS idx_service_provider_id ON ratings(service_provider_id);
      CREATE INDEX IF NOT EXISTS idx_created_at ON ratings(created_at);
    `)),s}async function d(e){let r=await o();return(await r.run("INSERT INTO ratings (service_provider_id, rating, ip_address, user_agent) VALUES (?, ?, ?, ?)",[e.service_provider_id,e.rating,e.ip_address,e.user_agent])).lastID}async function u(e){let r=await o(),t=await r.get("SELECT AVG(rating) as average, COUNT(*) as count FROM ratings WHERE service_provider_id = ?",[e]);return{average:t?.average?Math.round(10*t.average)/10:0,count:t?.count||0}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[276,311],()=>t(8245));module.exports=a})();